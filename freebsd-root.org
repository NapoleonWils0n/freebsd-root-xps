#+TITLE: freebsd root dotfiles
#+STARTUP: overview hideblocks
#+OPTIONS: num:nil author:nil
#+PROPERTY: header-args :mkdirp yes
* tangle dotfiles
** tangle document

C-c C-v t

** tangle only one code block

C-u C-c C-v t

** tangle from the command line

tangle file from the command line
where ~/git/freebsd/freebsd-root/freebsd-root.org is the path of the file to tangle

#+begin_src sh
emacs --batch -l org --eval '(org-babel-tangle-file "~/git/freebsd/freebsd-root/freebsd-root.org")'
#+end_src

* freebsd root dotfiles
** /boot
*** loader.conf

#+begin_example
/boot/loader.conf
#+end_example

**** loader.conf config

#+NAME: loader.conf
#+BEGIN_SRC conf
aesni_load="YES"
geom_eli_load="YES"
security.bsd.allow_destructive_dtrace=0
kern.geom.label.disk_ident.enable="0"
kern.geom.label.gptid.enable="0"
cryptodev_load="YES"
zfs_load="YES"
# nullfs tmpfs for poudriere
nullfs_load="YES"
tmpfs_load="YES"
# audio
snd_hda_load="YES"
snd_uaudio_load="YES"
# coretemp
acpi_video_load="YES"
coretemp_load="YES"
# touchpad
wsp_load="YES"
# async i/o
aio_load="YES"
# cuse audio for virtual_oss
cuse_load="YES"
# virtual oss - start with: sudo sysrc onestart virtual_oss 
virtual_oss_enable="NO"
# mixertui
sysctlinfo_load="YES"
sysctlbyname_improved_load="YES"
#+END_SRC

**** loader.conf tangle
:PROPERTIES:
:ORDERED:  t
:END:

+ root dir

#+NAME: loader.conf-root-dir
#+BEGIN_SRC conf :noweb yes :tangle "/sudo::/boot/loader.conf"
<<loader.conf>>
#+END_SRC
  
+ current dir

#+NAME: loader.conf-current-dir
#+BEGIN_SRC conf :noweb yes :tangle "boot/loader.conf"
<<loader.conf>>
#+END_SRC

** /etc
*** devfs.rules

#+begin_example
/etc/devfs.rules/
#+end_example

**** devfs.rules config

#+NAME: devfs.rules
#+BEGIN_SRC conf
[localrules=5]
add path 'da*' mode 0660 group operator
#+END_SRC

**** devfs.rules tangle
:PROPERTIES:
:ORDERED:  t
:END:

+ root dir

#+NAME: devfs.rules-root-dir
#+BEGIN_SRC conf :noweb yes :tangle "/sudo::/etc/devfs.rules"
<<devfs.rules>>
#+END_SRC
  
+ current dir

#+NAME: devfs.rules-current-dir
#+BEGIN_SRC conf :noweb yes :tangle "etc/devfs.rules"
<<devfs.rules>>
#+END_SRC

*** fstab

#+begin_example
/etc/fstab
#+end_example

**** fstab config

#+NAME: fstab
#+BEGIN_SRC conf
# Device		Mountpoint	FStype	Options		Dump	Pass#
/dev/gpt/efiboot0		/boot/efi	msdosfs	rw		2	2
/dev/nda0p3.eli		none	swap	sw		0	0
# linux
proc                            /proc           procfs  rw      0       0
linprocfs                       /compat/linux/proc	linprocfs	rw	0	0
linsysfs                        /compat/linux/sys	linsysfs	rw	0	0
#+END_SRC

**** fstab tangle
:PROPERTIES:
:ORDERED:  t
:END:

+ root dir

#+NAME: fstab-root-dir
#+BEGIN_SRC conf :noweb yes :tangle "/sudo::/etc/fstab"
<<fstab>>
#+END_SRC
  
+ current dir

#+NAME: fstab-current-dir
#+BEGIN_SRC conf :noweb yes :tangle "etc/fstab"
<<fstab>>
#+END_SRC

*** pf.conf

#+begin_example
/etc/pf.conf
#+end_example

**** pf.conf config

#+NAME: pf.conf
#+BEGIN_SRC conf
#=========================================================================#
# variables, macro and tables                                             #
#=========================================================================#

int_if="ue0" # usb to ethernet adaptor
#int_if="wlan0" # ralink usb wifi
vpn_if="tun0" # vpn interface
all_networks="0.0.0.0/0"
vpn_network="$vpn_if:network"
tcp_services = "{ ntp, 6881 }" # tcp services - torrent
udp_services = "{ ntp, 6882 }" # udp services - torrent
icmp_types = "{ echoreq, unreach }"
tcp_state="flags S/SA keep state"
udp_state="keep state"

#table <internet> { $all_networks, !self, !$int_if:network } # internet
#table <lan> { $int_if:network, !self }                      # lan network
table <myself> { self }                                     # self
table <martians> { 0.0.0.0/8 10.0.0.0/8 127.0.0.0/8 169.254.0.0/16     \
	 	   172.16.0.0/12 192.0.0.0/24 192.0.2.0/24 224.0.0.0/3 \
	 	   192.168.0.0/16 198.18.0.0/15 198.51.100.0/24        \
	 	   203.0.113.0/24 }                         # broken networks

#=========================================================================#
# global policy                                                           #
#=========================================================================#

set block-policy drop
set loginterface $int_if
set fingerprints "/etc/pf.os"
set skip on lo0
scrub in all fragment reassemble no-df max-mss 1440
antispoof log quick for { lo $int_if } label "block_spoofing"

#=========================================================================#
# block                                                                   #
#=========================================================================#

block log all # block log all
block return out quick inet6 all tag IPV6 # block ipv6 
block in quick inet6 all tag IPV6 # block ipv6

# block broken networks - turned off for synergy
# block in quick from { <martians> no-route urpf-failed } to any tag BAD_PACKET

#=========================================================================#
# anchors                                                                 #
#=========================================================================#

# emerging threats - anchor
#anchor "emerging-threats"
#load anchor "emerging-threats" from "/etc/pf.anchors/emerging-threats"

# openvpn - anchor
anchor "openvpn"

#=========================================================================#
# traffic tag                                                             #
#=========================================================================#

# icmp
pass inet proto icmp all icmp-type $icmp_types keep state tag ICMP

# Allow the tcp and udp services defined in the macros at the top of the file
pass in on $int_if inet proto tcp from any to ($int_if) port $tcp_services $tcp_state tag TCP_IN
pass in on $int_if inet proto udp from any to ($int_if) port $udp_services $udp_state tag UDP_IN

# outbound traffic
block out on $int_if all
pass out quick on $int_if all modulate state
#pass out quick on $int_if from <myself> to <lan> modulate state tag LAN_OUT
#pass out quick on $int_if from <myself> to <internet> modulate state tag INTERNET_OUT
#+END_SRC

**** pf.conf tangle
:PROPERTIES:
:ORDERED:  t
:END:

+ root dir

#+NAME: pf.conf-root-dir
#+BEGIN_SRC conf :noweb yes :tangle "/sudo::/etc/pf.conf"
<<pf.conf>>
#+END_SRC
  
+ current dir

#+NAME: pf.conf-current-dir
#+BEGIN_SRC conf :noweb yes :tangle "etc/pf.conf"
<<pf.conf>>
#+END_SRC

*** rc.conf

#+begin_example
/etc/rc.conf
#+end_example

**** rc.conf config

#+NAME: rc.conf
#+BEGIN_SRC conf
zfs_enable="YES"
clear_tmp_enable="YES"
syslogd_flags="-ss"
hostname="pollux"
ifconfig_ue0="DHCP"
local_unbound_enable="YES"
sshd_enable="NO"
moused_enable="YES"
# Set dumpdev to "AUTO" to enable crash dumps, "NO" to disable
dumpdev="AUTO"
# pf firewall
pf_enable="YES"
# time and date
ntpd_enable="YES"
ntpd_sync_on_start="YES"
# power settings
powerd_enable="YES"
powerd_flags="-a hiadaptive -b adaptive"
performance_cx_lowest="Cmax"
economy_cx_lowest="Cmax"
# kld list 
kld_list="nvidia-modeset nvidia-drm linux linux64 i915kms ext2fs"
# wayland
seatd_enable="YES"
# dbus
dbus_enable="YES"
# linux
linux_enable="YES"
# virtual oss - start with: sudo sysrc onestart virtual_oss 
virtual_oss_enable="NO"
# sndiod audio
sndiod_enable="YES"
# devfs rules for user mounting drives
devfs_system_ruleset="localrules"
# ralink wifi
wlans_run0="wlan0"
ifconfig_wlan0="WPA SYNDHCP"
dnscrypt_proxy_enable="YES"
dnscrypt_proxy_pidfile="/var/run/dnscrypt-proxy.pid"
dnscrypt_proxy_logfile="/var/log/dnscrypt-proxy.log"
#+END_SRC

**** rc.conf tangle
:PROPERTIES:
:ORDERED:  t
:END:

+ root dir

#+NAME: rc.conf-root-dir
#+BEGIN_SRC conf :noweb yes :tangle "/sudo::/etc/rc.conf"
<<rc.conf>>
#+END_SRC
  
+ current dir

#+NAME: rc.conf-current-dir
#+BEGIN_SRC conf :noweb yes :tangle "etc/rc.conf"
<<rc.conf>>
#+END_SRC

*** resolv.conf

#+begin_example
/etc/resolv.conf
#+end_example

**** resolv.conf config

#+NAME: resolv.conf
#+BEGIN_SRC conf
# Generated by resolvconf
search localdomain
# nameserver 192.168.1.1

nameserver 127.0.0.1
options edns0
#+END_SRC

**** resolv.conf tangle
:PROPERTIES:
:ORDERED:  t
:END:

+ root dir

#+NAME: resolv.conf-root-dir
#+BEGIN_SRC conf :noweb yes :tangle "/sudo::/etc/resolv.conf"
<<resolv.conf>>
#+END_SRC
  
+ current dir

#+NAME: resolv.conf-current-dir
#+BEGIN_SRC conf :noweb yes :tangle "etc/resolv.conf"
<<resolv.conf>>
#+END_SRC

*** sysctl.conf

#+begin_example
/etc/sysctl.conf
#+end_example

**** sysctl.conf config

#+NAME: sysctl.conf
#+BEGIN_SRC conf
#
#  This file is read when going to multi-user and its contents piped thru
#  ``sysctl'' to adjust kernel values.  ``man 5 sysctl.conf'' for details.
#

# Uncomment this to prevent users from seeing information about processes that
# are being run under another UID.
#security.bsd.see_other_uids=0
security.bsd.see_other_uids=0
security.bsd.see_other_gids=0
security.bsd.see_jail_proc=0
security.bsd.unprivileged_read_msgbuf=0
security.bsd.unprivileged_proc_debug=0
kern.randompid=1
vfs.zfs.min_auto_ashift=12
# disable bell
hw.syscons.bell=0
# user mount drives
vfs.usermount=1
# default audio output - headphones
hw.snd.default_unit=1
# use new audio devices automatically
hw.snd.default_auto=1
# chromium
kern.ipc.shm_allow_removed=1
# change reponsiveness from server to desktop
kern.sched.preempt_thresh=224
# screen brightness
hw.acpi.video.lcd0.economy=50
hw.acpi.video.lcd0.fullpower=100
hw.acpi.video.lcd0.brightness=100
#+END_SRC

**** sysctl.conf tangle
:PROPERTIES:
:ORDERED:  t
:END:

+ root dir

#+NAME: sysctl.conf-root-dir
#+BEGIN_SRC conf :noweb yes :tangle "/sudo::/etc/sysctl.conf"
<<sysctl.conf>>
#+END_SRC
  
+ current dir

#+NAME: sysctl.conf-current-dir
#+BEGIN_SRC conf :noweb yes :tangle "etc/sysctl.conf"
<<sysctl.conf>>
#+END_SRC

*** ttys

#+begin_example
/etc/ttys
#+end_example

**** ttys config

#+NAME: ttys
#+BEGIN_SRC conf
#
#	@(#)ttys	5.1 (Berkeley) 4/17/89
#
# This file specifies various information about terminals on the system.
# It is used by several different programs.  Common entries for the
# various columns include:
#
# name  The name of the terminal device.
#
# getty The program to start running on the terminal.  Typically a
#       getty program, as the name implies.  Other common entries
#       include none, when no getty is needed, and xdm, to start the
#       X Window System.
#
# type The initial terminal type for this port.  For hardwired
#      terminal lines, this will contain the type of terminal used.
#      For virtual consoles, the correct type is typically xterm.
#      Other common values include dialup for incoming modem ports, and
#      unknown when the terminal type cannot be predetermined.
#
# status Must be on or off.  If on, init will run the getty program on
#        the specified port.  If the word "secure" appears, this tty
#        allows root login.
#
# name	getty				type	status		comments
#
# If console is marked "insecure", then init will ask for the root password
# when going to single-user mode.
console	none				unknown	off insecure
#
ttyv0	"/usr/libexec/getty Pc"		xterm	onifexists insecure
# Virtual terminals
ttyv1	"/usr/libexec/getty Pc"		xterm	onifexists insecure
ttyv2	"/usr/libexec/getty Pc"		xterm	onifexists insecure
ttyv3	"/usr/libexec/getty Pc"		xterm	onifexists insecure
ttyv4	"/usr/libexec/getty Pc"		xterm	onifexists insecure
ttyv5	"/usr/libexec/getty Pc"		xterm	onifexists insecure
ttyv6	"/usr/libexec/getty Pc"		xterm	onifexists insecure
ttyv7	"/usr/libexec/getty Pc"		xterm	onifexists insecure
ttyv8	"/usr/local/bin/xdm -nodaemon"	xterm	off insecure
# Serial terminals
# The 'dialup' keyword identifies dialin lines to login, fingerd etc.
ttyu0	"/usr/libexec/getty 3wire"	vt100	onifconsole insecure
ttyu1	"/usr/libexec/getty 3wire"	vt100	onifconsole insecure
ttyu2	"/usr/libexec/getty 3wire"	vt100	onifconsole insecure
ttyu3	"/usr/libexec/getty 3wire"	vt100	onifconsole insecure
# Dumb console
dcons	"/usr/libexec/getty std.115200"	vt100	off insecure
# Xen Virtual console
xc0	"/usr/libexec/getty Pc"		xterm	onifconsole insecure
# RISC-V HTIF console
rcons	"/usr/libexec/getty std.115200"	vt100	onifconsole insecure
#+END_SRC

**** ttys tangle
:PROPERTIES:
:ORDERED:  t
:END:

+ root dir

#+NAME: ttys-root-dir
#+BEGIN_SRC conf :noweb yes :tangle "/sudo::/etc/ttys"
<<ttys>>
#+END_SRC
  
+ current dir

#+NAME: ttys-current-dir
#+BEGIN_SRC conf :noweb yes :tangle "etc/ttys"
<<ttys>>
#+END_SRC

*** unbound
**** conf.d
***** custom.conf

#+begin_example
/etc/unbound/conf.d/custom.conf
#+end_example

****** custom.conf config

#+NAME: custom.conf
#+BEGIN_SRC conf
server:
# include: "/etc/unbound/unbound_outgoing_interface"
	verbosity: 1
	access-control: 0.0.0.0/0 refuse
	access-control: 127.0.0.0/8 allow
	access-control: ::0/0 refuse
	access-control: ::1 allow
	access-control: ::ffff:127.0.0.1 allow
	
	# enable to not answer id.server and hostname.bind queries.
	hide-identity: yes
	hide-version: yes
	harden-glue: yes
	harden-dnssec-stripped: yes
	
        # dont query localhost needed for dnscrypt-proxy
        do-not-query-localhost: no
# remote-control:
#	control-enable: no
#+END_SRC

****** custom.conf tangle
:PROPERTIES:
:ORDERED:  t
:END:

+ root dir

#+NAME: custom.conf-root-dir
#+BEGIN_SRC conf :noweb yes :tangle "/sudo::/etc/unbound/conf.d/custom.conf"
<<custom.conf>>
#+END_SRC
  
+ current dir

#+NAME: custom.conf-current-dir
#+BEGIN_SRC conf :noweb yes :tangle "etc/unbound/conf.d/custom.conf"
<<custom.conf>>
#+END_SRC

**** forward.conf

#+begin_example
/etc/unbound/forward.conf
#+end_example

***** forward.conf config

#+NAME: forward.conf
#+BEGIN_SRC conf
# Generated by resolvconf

forward-zone:
	name: "."
	forward-addr: 127.0.0.1@5353
#+END_SRC

***** forward.conf tangle
:PROPERTIES:
:ORDERED:  t
:END:

+ root dir

#+NAME: forward.conf-root-dir
#+BEGIN_SRC conf :noweb yes :tangle "/sudo::/etc/unbound/forward.conf"
<<forward.conf>>
#+END_SRC
  
+ current dir

#+NAME: forward.conf-current-dir
#+BEGIN_SRC conf :noweb yes :tangle "etc/unbound/forward.conf"
<<forward.conf>>
#+END_SRC

**** unbound_outgoing_interface

#+begin_example
/etc/unbound/unbound_outgoing_interface
#+end_example

***** unbound_outgoing_interface config

#+NAME: unbound_outgoing_interface
#+BEGIN_SRC conf
#+END_SRC

***** unbound_outgoing_interface tangle
:PROPERTIES:
:ORDERED:  t
:END:

+ root dir

#+NAME: unbound_outgoing_interface-root-dir
#+BEGIN_SRC conf :noweb yes :tangle "/sudo::/etc/unbound/unbound_outgoing_interface"
<<unbound_outgoing_interface>>
#+END_SRC
  
+ current dir

#+NAME: unbound_outgoing_interface-current-dir
#+BEGIN_SRC conf :noweb yes :tangle "etc/unbound/unbound_outgoing_interface"
<<unbound_outgoing_interface>>
#+END_SRC

** /usr/local/etc
*** doas

#+begin_example
/usr/local/etc/doas.conf
#+end_example

**** doas config

#+NAME: doas
#+BEGIN_SRC conf
# permit user
permit keepenv :djwilcox

# mount drives
permit nopass :djwilcox cmd mount
permit nopass :djwilcox cmd umount

# restart networking
permit nopass :djwilcox cmd service args netif start
permit nopass :djwilcox cmd service args netif stop
permit nopass :djwilcox cmd service args netif restart

# ifconfig wlan0
permit nopass :djwilcox cmd ifconfig args wlan0 up
permit nopass :djwilcox cmd ifconfig args wlan0 down

# ifconfig ue0 - usb ethenet
permit nopass :djwilcox cmd ifconfig args ue0 up
permit nopass :djwilcox cmd ifconfig args ue0 down

# ifconfig bge0 - thunderbolt ethernet
permit nopass :djwilcox cmd ifconfig args bge0 up
permit nopass :djwilcox cmd ifconfig args bge0 down

# ifconfig scan and wpa_supplicant
permit nopass :djwilcox cmd ifconfig args wlan0 list scan
permit nopass :djwilcox cmd wpa_supplicant args -B -i wlan0 -c /etc/wpa_supplicant.conf 

# musicpd service start and stop
permit nopass :djwilcox cmd service args musicpd onestart
permit nopass :djwilcox cmd service args musicpd onestop

# pkg update
permit nopass :djwilcox cmd pkg args update

# root as root
permit nopass keepenv root as root
#+END_SRC

**** doas tangle
:PROPERTIES:
:ORDERED:  t
:END:

+ root dir

#+NAME: doas-root-dir
#+BEGIN_SRC conf :noweb yes :tangle "/sudo::/usr/local/etc/doas.conf"
<<doas>>
#+END_SRC
  
+ current dir

#+NAME: doas-current-dir
#+BEGIN_SRC conf :noweb yes :tangle "usr/local/etc/doas.conf"
<<doas>>
#+END_SRC


*** poudriere.conf

#+begin_example
/usr/local/etc/poudriere.conf
#+end_example

**** poudriere.conf config

#+NAME: poudriere.conf
#+BEGIN_SRC conf

# Poudriere can optionally use ZFS for its ports/jail storage. For
# ZFS define ZPOOL, otherwise set NO_ZFS=yes
# 
#### ZFS
# The pool where poudriere will create all the filesystems it needs
# poudriere will use ${ZPOOL}/${ZROOTFS} as its root
#
# You need at least 7GB of free space in this pool to have a working
# poudriere.
#
ZPOOL=zroot

### NO ZFS
# To not use ZFS, define NO_ZFS=yes
#NO_ZFS=yes

# root of the poudriere zfs filesystem, by default /poudriere
ZROOTFS=/poudriere

# the host where to download sets for the jails setup
# You can specify here a host or an IP
# replace _PROTO_ by http or ftp
# replace _CHANGE_THIS_ by the hostname of the mirrors where you want to fetch
# by default: ftp://ftp.freebsd.org
#
# Also note that every protocols supported by fetch(1) are supported here, even
# file:///
# Suggested: https://download.FreeBSD.org
FREEBSD_HOST=https://download.FreeBSD.org

# By default the jails have no /etc/resolv.conf, you will need to set
# RESOLV_CONF to a file on your hosts system that will be copied has
# /etc/resolv.conf for the jail, except if you don't need it (using an http
# proxy for example)
RESOLV_CONF=/etc/resolv.conf

# The directory where poudriere will store jails and ports
BASEFS=/usr/local/poudriere

# The directory where the jail will store the packages and logs
# by default a zfs filesystem will be created and set to
# ${BASEFS}/data
#
#POUDRIERE_DATA=${BASEFS}/data

# Use portlint to check ports sanity
USE_PORTLINT=no

# When building packages, a memory device can be used to speedup the build.
# Only one of MFSSIZE or USE_TMPFS is supported. TMPFS is generally faster
# and will expand to the needed amount of RAM. MFS is a slower since it
# uses UFS and several abstraction layers.

# If set WRKDIRPREFIX will be mdmfs of the given size (mM or gG)
#MFSSIZE=4G

# Use tmpfs(5)
# This can be a space-separated list of options:
# wrkdir    - Use tmpfs(5) for port building WRKDIRPREFIX
# data      - Use tmpfs(5) for poudriere cache/temp build data
# localbase - Use tmpfs(5) for LOCALBASE (installing ports for packaging/testing)
# all       - Run the entire build in memory, including builder jails.
# yes       - Enables tmpfs(5) for wrkdir and data
# no        - Disable use of tmpfs(5)
# EXAMPLE: USE_TMPFS="wrkdir data"
USE_TMPFS=yes

# How much memory to limit tmpfs size to for *each builder* in GiB
# (default: none)
#TMPFS_LIMIT=8

# How much memory to limit jail processes to for *each builder*
# in GiB (default: none)
#MAX_MEMORY=8

# How many file descriptors to limit each jail process to (default: 1024)
# This can also be set per PKGBASE, such as MAX_FILES_RStudio=2048.
# Package names with hyphens (-) should be replaced with underscores (_).
#MAX_FILES=1024

# If set the given directory will be used for the distfiles
# This allows to share the distfiles between jails and ports tree
# If this is "no", poudriere must be supplied a ports tree that already has
# the required distfiles.
DISTFILES_CACHE=/usr/ports/distfiles

# If set the ports tree marked to use git will use the defined
# mirror (default: git.FreeBSD.org/port.git)
#
# Example to use github mirror:
#GIT_BASEURL=https://github.com/freebsd/freebsd-src.git

# If set the source tree marked to use git will use the defined
# mirror (default: git.FreeBSD.org/src.git)
#
# Example to use github mirror:
#GIT_PORTSURL=https://github.com/freebsd/freebsd-ports.git

# If set the ports tree or source tree marked to use svn will use the defined
# mirror (default: svn.FreeBSD.org)
# The SSL fingerprints are published here:
# https://www.freebsd.org/doc/en_US.ISO8859-1/books/handbook/svn.html#svn-mirrors
#SVN_HOST=svn.FreeBSD.org

# Automatic OPTION change detection
# When bulk building packages, compare the options from kept packages to
# the current options to be built. If they differ, the existing package
# will be deleted and the port will be rebuilt.
# Valid options: yes, no, verbose
# verbose will display the old and new options
CHECK_CHANGED_OPTIONS=verbose

# Automatic Dependency change detection
# When bulk building packages, compare the dependencies from kept packages to
# the current dependencies for every port. If they differ, the existing package
# will be deleted and the port will be rebuilt. This helps catch changes such
# as DEFAULT_RUBY_VERSION, PERL_VERSION, WITHOUT_X11 that change dependencies
# for many ports.
# Valid options: yes, no
# Default: yes
CHECK_CHANGED_DEPS=yes

# Consider bad dependency lines on the wrong PKGNAME as fatal.
# For example:
#    BUILD_DEPENDS=  p5-List-MoreUtils>=0:lang/p5-List-MoreUtils
# If this port's PKGNAME were really "List-MoreUtils" then it would
# not be recorded into the resulting package.  The next build with
# CHECK_CHANGED_DEPS enabled would consider it a "new dependency"
# since it is in the port but not in the package.  This is usually
# a warning but can be made fatal instead by enabling this option.
# Default: no
#BAD_PKGNAME_DEPS_ARE_FATAL=yes

# Path to the RSA key to sign the PKG repo with. See pkg-repo(8)
# This produces a repo that supports SIGNATURE_TYPE=PUBKEY
# Default: not set
PKG_REPO_SIGNING_KEY=/usr/local/etc/ssl/keys/poudriere.key

# Command to sign the PKG repo with. See pkg-repo(8)
# This produces a repo that supports SIGNATURE_TYPE=FINGERPRINTS
# Default: not set
#SIGNING_COMMAND=ssh signing-server sign.sh

# Repo signing command execution context
# If SIGNING_COMMAND is set, run pkg-repo(8) on the host?
#   no  -   Run in the jail
#   yes -   Run on the host
# Default: no
#PKG_REPO_FROM_HOST=yes

# ccache support. Supply the path to your ccache cache directory.
# It will be mounted into the jail and be shared among all jails.
# It is recommended that extra ccache configuration be done with
# ccache -o rather than from the environment.
#CCACHE_DIR=/var/cache/ccache

# Static ccache support from host.  This uses the existing
# ccache from the host in the build jail.  This is useful for
# using ccache+memcached which cannot easily be bootstrapped
# otherwise.  The path to the PREFIX where ccache was installed
# must be used here, and ccache must have been built statically.
# Note also that ccache+memcached will require network access
# which is normally disabled.  Separately setting RESTRICT_NETWORKING=no
# may be required for non-localhost memcached servers.
#CCACHE_STATIC_PREFIX=/usr/local

# The jails normally only allow network access during the 'make fetch'
# phase.  This is a security restriction to prevent random things
# ran during a build from accessing the network.  Disabling this
# is not advised.  ALLOW_NETWORKING_PACKAGES may be used to allow networking
# for a subset of packages only.
#RESTRICT_NETWORKING=yes
#ALLOW_NETWORKING_PACKAGES="npm-foo"

# parallel build support.
#
# By default poudriere uses hw.ncpu to determine the number of builders.
# You can override this default by changing PARALLEL_JOBS here, or
# by specifying the -J flag to bulk/testport.
#
# Example to define PARALLEL_JOBS to one single job
# PARALLEL_JOBS=1

# How many jobs should be used for preparing the build? These tend to
# be more IO bound and may be worth tweaking. Default: PARALLEL_JOBS * 1.25
# PREPARE_PARALLEL_JOBS=1


# If set, failed builds will save the WRKDIR to ${POUDRIERE_DATA}/wrkdirs
# SAVE_WRKDIR=yes

# Choose the default format for the workdir packing: could be tar,tgz,tbz,txz,tzst
# default is tbz
# WRKDIR_ARCHIVE_FORMAT=tbz

# Disable Linux support
# NOLINUX=yes

# By default poudriere sets FORCE_PACKAGE
# To disable it (useful when building public packages):
# NO_FORCE_PACKAGE=yes

# By default poudriere sets PACKAGE_BUILDING
# To disable it:
# NO_PACKAGE_BUILDING=yes

# If you are using a proxy define it here:
# export HTTP_PROXY=bla
# export FTP_PROXY=bla
#
# Cleanout the restricted packages
# NO_RESTRICTED=yes

# By default MAKE_JOBS is disabled to allow only one process per cpu
# Use the following to allow it anyway
# ALLOW_MAKE_JOBS=yes

# List of packages that will always be allowed to use MAKE_JOBS
# regardless of ALLOW_MAKE_JOBS. This is useful for allowing ports
# which holdup the rest of the queue to build more quickly.
#ALLOW_MAKE_JOBS_PACKAGES="pkg ccache py*"

# Timestamp every line of build logs
# Default: no
#TIMESTAMP_LOGS=no

# URL where your POUDRIERE_DATA/logs are hosted
# This will be used for giving URL hints to the HTML output when
# scheduling and starting builds
#URL_BASE=http://yourdomain.com/poudriere/


# This defines the max time (in seconds) that a command may run for a build
# before it is killed for taking too long. Default: 86400
#MAX_EXECUTION_TIME=86400

# This defines the time (in seconds) before a command is considered to
# be in a runaway state for having no output on stdout. Default: 7200
#NOHANG_TIME=7200


# The repository is updated atomically if set yes. This leaves the
# repository untouched until the build completes. This involves using
# hardlinks and symlinks. The operations are fast, but can be intrusive
# for remote syncing or backups.
# Recommended to always keep on.
# Default: yes
#ATOMIC_PACKAGE_REPOSITORY=yes

# When using ATOMIC_PACKAGE_REPOSITORY, commit the packages if some
# packages fail to build. Ignored ports are considered successful.
# This can be set to 'no' to only commit the packages once no failures
# are encountered.
# Default: yes
#COMMIT_PACKAGES_ON_FAILURE=yes

# Keep older package repositories. This can be used to rollback a system
# or to bisect issues by changing the repository to one of the older
# versions and reinstalling everything with `pkg upgrade -f`
# ATOMIC_PACKAGE_REPOSITORY is required for this.
# Default: no
#KEEP_OLD_PACKAGES=no

# How many old package repositories to keep with KEEP_OLD_PACKAGES
# Default: 5
#KEEP_OLD_PACKAGES_COUNT=5

# Make testing errors fatal.
# If set to 'no', ports with test failure will be marked as failed but still
# packaged to permit testing dependent ports (useful for bulk -t -a)
# Default: yes
#PORTTESTING_FATAL=yes

# Define the building jail hostname to be used when building the packages
# Some port/packages hardcode the hostname of the host during build time
# This is a necessary setup for reproducible builds.
#BUILDER_HOSTNAME=pkg.FreeBSD.org

# Define to get a predictable timestamp on the ports tree
# This is a necessary setup for reproducible builds.
#PRESERVE_TIMESTAMP=yes

# Define to yes to build and stage as a regular user
# Default: yes, unless CCACHE_DIR is set and CCACHE_DIR_NON_ROOT_SAFE is not
# set.  Note that to use ccache with BUILD_AS_NON_ROOT you will need to
# use a non-shared CCACHE_DIR that is only built by PORTBUILD_USER and chowned
# to that user.  Then set CCACHE_DIR_NON_ROOT_SAFE to yes.
#BUILD_AS_NON_ROOT=no

# Define to the username to build as when BUILD_AS_NON_ROOT is yes.
# Default: nobody (uid PORTBUILD_UID)
#PORTBUILD_USER=nobody

# Define to the uid to use for PORTBUILD_USER if the user does not
# already exist in the jail.
# Default: 65532
#PORTBUILD_UID=65534

# Define pkgname globs to boost priority for
# Default: none
#PRIORITY_BOOST="pypy openoffice*"

# Define format for buildnames
# Default: %Y-%m-%d_%Hh%Mm%Ss
# ISO8601:
#BUILDNAME_FORMAT="%FT%T%z"

# Define format for build duration times
# Default: %H:%M:%S
#DURATION_FORMAT="%H:%M:%S"

# Use colors when in a TTY
# Default: yes
#USE_COLORS=yes

# Only build what is requested. Do not rebuild build deps if nothing requested
# depends on them. This can create an inconsistent repository if you often
# build one-off packages but expect the repository to stay consistent.
# Defaut: yes
#TRIM_ORPHANED_BUILD_DEPS=yes

# A list of directories to exclude from leftover and filesystem violation
# mtree checks.  Ccache is used here as an example but is already
# excluded by default.  There is no need to add it here unless a
# special configuration is used where it is a problem.
# Default: none
#LOCAL_MTREE_EXCLUDES="/usr/obj /var/tmp/ccache"

# Set to hosted to use the /data directory instead of inline style HTML
# Default: inline
#HTML_TYPE="hosted"

# Set to track remaining ports in the HTML interface.  This can slow down
# processing of the queue slightly, especially for bulk -a builds.
# Default: no
#HTML_TRACK_REMAINING=yes
#+END_SRC

**** poudriere.conf tangle
:PROPERTIES:
:ORDERED:  t
:END:

+ root dir

#+NAME: poudriere.conf-root-dir
#+BEGIN_SRC conf :noweb yes :tangle "/sudo::/usr/local/etc/poudriere.conf"
<<poudriere.conf>>
#+END_SRC
  
+ current dir

#+NAME: poudriere.conf-current-dir
#+BEGIN_SRC conf :noweb yes :tangle "usr/local/etc/poudriere.conf"
<<poudriere.conf>>
#+END_SRC
