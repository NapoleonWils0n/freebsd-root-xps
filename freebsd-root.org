#+TITLE: freebsd root dotfiles
#+STARTUP: overview hideblocks
#+OPTIONS: num:nil author:nil
#+PROPERTY: header-args :mkdirp yes
* tangle dotfiles
** tangle document

C-c C-v t

** tangle only one code block

C-u C-c C-v t

** tangle from the command line

tangle file from the command line
where ~/git/freebsd/freebsd-root/freebsd-root.org is the path of the file to tangle

#+begin_src sh
emacs --batch -l org --eval '(org-babel-tangle-file "~/git/freebsd/freebsd-root/freebsd-root.org")'
#+end_src

* freebsd root dotfiles
** boot
*** loader.conf

/boot/loader.conf

**** loader.conf config

#+NAME: loader.conf
#+BEGIN_SRC conf
aesni_load="YES"
geom_eli_load="YES"
security.bsd.allow_destructive_dtrace=0
kern.geom.label.disk_ident.enable="0"
kern.geom.label.gptid.enable="0"
cryptodev_load="YES"
zfs_load="YES"
# nullfs tmpfs for poudriere
nullfs_load="YES"
tmpfs_load="YES"
# audio
snd_hda_load="YES"
snd_uaudio_load="YES"
# coretemp
acpi_video_load="YES"
coretemp_load="YES"
# touchpad
wsp_load="YES"
# async i/o
aio_load="YES"
# cuse audio for virtual_oss
cuse_load="YES"
# virtual oss - start with: sudo sysrc onestart virtual_oss 
virtual_oss_enable="NO"
# mixertui
sysctlinfo_load="YES"
sysctlbyname_improved_load="YES"
#+END_SRC

**** loader.conf tangle
:PROPERTIES:
:ORDERED:  t
:END:

+ root dir

#+NAME: loader.conf-root-dir
#+BEGIN_SRC conf :noweb yes :tangle "/sudo::/boot/loader.conf"
<<loader.conf>>
#+END_SRC
  
+ current dir

#+NAME: loader.conf-current-dir
#+BEGIN_SRC conf :noweb yes :tangle "boot/loader.conf"
<<loader.conf>>
#+END_SRC

** etc
*** devfs.rules

//etc/devfs.rules/

**** devfs.rules config

#+NAME: devfs.rules
#+BEGIN_SRC conf
[localrules=5]
add path 'da*' mode 0660 group operator
#+END_SRC

**** devfs.rules tangle
:PROPERTIES:
:ORDERED:  t
:END:

+ root dir

#+NAME: devfs.rules-root-dir
#+BEGIN_SRC conf :noweb yes :tangle "/sudo::/etc/devfs.rules"
<<devfs.rules>>
#+END_SRC
  
+ current dir

#+NAME: devfs.rules-current-dir
#+BEGIN_SRC conf :noweb yes :tangle "etc/devfs.rules"
<<devfs.rules>>
#+END_SRC

*** fstab

/etc/fstab

**** fstab config

#+NAME: fstab
#+BEGIN_SRC conf
# Device		Mountpoint	FStype	Options		Dump	Pass#
/dev/gpt/efiboot0		/boot/efi	msdosfs	rw		2	2
/dev/nda0p3.eli		none	swap	sw		0	0
# linux
proc                            /proc           procfs  rw      0       0
linprocfs                       /compat/linux/proc	linprocfs	rw	0	0
linsysfs                        /compat/linux/sys	linsysfs	rw	0	0
#+END_SRC

**** fstab tangle
:PROPERTIES:
:ORDERED:  t
:END:

+ root dir

#+NAME: fstab-root-dir
#+BEGIN_SRC conf :noweb yes :tangle "/sudo::/etc/fstab"
<<fstab>>
#+END_SRC
  
+ current dir

#+NAME: fstab-current-dir
#+BEGIN_SRC conf :noweb yes :tangle "etc/fstab"
<<fstab>>
#+END_SRC

*** pf.conf

/etc/pf.conf

**** pf.conf config

#+NAME: pf.conf
#+BEGIN_SRC conf
#=========================================================================#
# variables, macro and tables                                             #
#=========================================================================#

int_if="ue0" # usb to ethernet adaptor
#int_if="wlan0" # ralink usb wifi
vpn_if="tun0" # vpn interface
all_networks="0.0.0.0/0"
vpn_network="$vpn_if:network"
tcp_services = "{ ntp, 6881 }" # tcp services - torrent
udp_services = "{ ntp, 6882 }" # udp services - torrent
icmp_types = "{ echoreq, unreach }"
tcp_state="flags S/SA keep state"
udp_state="keep state"

#table <internet> { $all_networks, !self, !$int_if:network } # internet
#table <lan> { $int_if:network, !self }                      # lan network
table <myself> { self }                                     # self
table <martians> { 0.0.0.0/8 10.0.0.0/8 127.0.0.0/8 169.254.0.0/16     \
	 	   172.16.0.0/12 192.0.0.0/24 192.0.2.0/24 224.0.0.0/3 \
	 	   192.168.0.0/16 198.18.0.0/15 198.51.100.0/24        \
	 	   203.0.113.0/24 }                         # broken networks

#=========================================================================#
# global policy                                                           #
#=========================================================================#

set block-policy drop
set loginterface $int_if
set fingerprints "/etc/pf.os"
set skip on lo0
scrub in all fragment reassemble no-df max-mss 1440
antispoof log quick for { lo $int_if } label "block_spoofing"

#=========================================================================#
# block                                                                   #
#=========================================================================#

block log all # block log all
block return out quick inet6 all tag IPV6 # block ipv6 
block in quick inet6 all tag IPV6 # block ipv6

# block broken networks - turned off for synergy
# block in quick from { <martians> no-route urpf-failed } to any tag BAD_PACKET

#=========================================================================#
# anchors                                                                 #
#=========================================================================#

# emerging threats - anchor
#anchor "emerging-threats"
#load anchor "emerging-threats" from "/etc/pf.anchors/emerging-threats"

# openvpn - anchor
anchor "openvpn"

#=========================================================================#
# traffic tag                                                             #
#=========================================================================#

# icmp
pass inet proto icmp all icmp-type $icmp_types keep state tag ICMP

# Allow the tcp and udp services defined in the macros at the top of the file
pass in on $int_if inet proto tcp from any to ($int_if) port $tcp_services $tcp_state tag TCP_IN
pass in on $int_if inet proto udp from any to ($int_if) port $udp_services $udp_state tag UDP_IN

# outbound traffic
block out on $int_if all
pass out quick on $int_if all modulate state
#pass out quick on $int_if from <myself> to <lan> modulate state tag LAN_OUT
#pass out quick on $int_if from <myself> to <internet> modulate state tag INTERNET_OUT
#+END_SRC

**** pf.conf tangle
:PROPERTIES:
:ORDERED:  t
:END:

+ root dir

#+NAME: pf.conf-root-dir
#+BEGIN_SRC conf :noweb yes :tangle "/sudo::/etc/pf.conf"
<<pf.conf>>
#+END_SRC
  
+ current dir

#+NAME: pf.conf-current-dir
#+BEGIN_SRC conf :noweb yes :tangle "etc/pf.conf"
<<pf.conf>>
#+END_SRC

** doas

/usr/local/etc/doas.conf

*** doas config

#+NAME: doas
#+BEGIN_SRC conf
# permit user
permit keepenv :djwilcox

# mount drives
permit nopass :djwilcox cmd mount
permit nopass :djwilcox cmd umount

# restart networking
permit nopass :djwilcox cmd service args netif start
permit nopass :djwilcox cmd service args netif stop
permit nopass :djwilcox cmd service args netif restart

# ifconfig wlan0
permit nopass :djwilcox cmd ifconfig args wlan0 up
permit nopass :djwilcox cmd ifconfig args wlan0 down

# ifconfig ue0 - usb ethenet
permit nopass :djwilcox cmd ifconfig args ue0 up
permit nopass :djwilcox cmd ifconfig args ue0 down

# ifconfig bge0 - thunderbolt ethernet
permit nopass :djwilcox cmd ifconfig args bge0 up
permit nopass :djwilcox cmd ifconfig args bge0 down

# ifconfig scan and wpa_supplicant
permit nopass :djwilcox cmd ifconfig args wlan0 list scan
permit nopass :djwilcox cmd wpa_supplicant args -B -i wlan0 -c /etc/wpa_supplicant.conf 

# musicpd service start and stop
permit nopass :djwilcox cmd service args musicpd onestart
permit nopass :djwilcox cmd service args musicpd onestop

# pkg update
permit nopass :djwilcox cmd pkg args update

# root as root
permit nopass keepenv root as root
#+END_SRC

*** doas tangle
:PROPERTIES:
:ORDERED:  t
:END:

+ root dir

#+NAME: doas-root-dir
#+BEGIN_SRC conf :noweb yes :tangle "/sudo::/usr/local/etc/doas.conf"
<<doas>>
#+END_SRC
  
+ current dir

#+NAME: doas-current-dir
#+BEGIN_SRC conf :noweb yes :tangle "usr/local/etc/doas.conf"
<<doas>>
#+END_SRC

