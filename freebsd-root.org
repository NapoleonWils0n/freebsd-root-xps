#+TITLE: freebsd root dotfiles
#+STARTUP: overview hideblocks
#+OPTIONS: num:nil author:nil
#+PROPERTY: header-args :mkdirp yes
* tangle dotfiles
** tangle document

C-c C-v t

** tangle only one code block

C-u C-c C-v t

** tangle from the command line

tangle file from the command line
where ~/git/freebsd/freebsd-root/freebsd-root.org is the path of the file to tangle

#+begin_src sh
emacs --batch -l org --eval '(org-babel-tangle-file "~/git/freebsd/freebsd-root/freebsd-root.org")'
#+end_src

* freebsd root dotfiles
** /boot
*** loader.conf

#+begin_example
/boot/loader.conf
#+end_example

**** loader.conf config

#+NAME: loader.conf
#+BEGIN_SRC conf
aesni_load="YES"
geom_eli_load="YES"
security.bsd.allow_destructive_dtrace=0
kern.geom.label.disk_ident.enable="0"
kern.geom.label.gptid.enable="0"
cryptodev_load="YES"
zfs_load="YES"
# nullfs tmpfs for poudriere
nullfs_load="YES"
tmpfs_load="YES"
# audio
snd_hda_load="YES"
snd_uaudio_load="YES"
# coretemp
acpi_video_load="YES"
coretemp_load="YES"
# touchpad
wsp_load="YES"
# async i/o
aio_load="YES"
# cuse audio for virtual_oss
cuse_load="YES"
# virtual oss - start with: sudo sysrc onestart virtual_oss 
virtual_oss_enable="NO"
# mixertui
sysctlinfo_load="YES"
sysctlbyname_improved_load="YES"
#+END_SRC

**** loader.conf tangle
:PROPERTIES:
:ORDERED:  t
:END:

+ root dir

#+NAME: loader.conf-root-dir
#+BEGIN_SRC conf :noweb yes :tangle "/sudo::/boot/loader.conf"
<<loader.conf>>
#+END_SRC
  
+ current dir

#+NAME: loader.conf-current-dir
#+BEGIN_SRC conf :noweb yes :tangle "boot/loader.conf"
<<loader.conf>>
#+END_SRC

** /etc
*** devfs.rules

#+begin_example
/etc/devfs.rules/
#+end_example

**** devfs.rules config

#+NAME: devfs.rules
#+BEGIN_SRC conf
[localrules=5]
add path 'da*' mode 0660 group operator
#+END_SRC

**** devfs.rules tangle
:PROPERTIES:
:ORDERED:  t
:END:

+ root dir

#+NAME: devfs.rules-root-dir
#+BEGIN_SRC conf :noweb yes :tangle "/sudo::/etc/devfs.rules"
<<devfs.rules>>
#+END_SRC
  
+ current dir

#+NAME: devfs.rules-current-dir
#+BEGIN_SRC conf :noweb yes :tangle "etc/devfs.rules"
<<devfs.rules>>
#+END_SRC

*** fstab

#+begin_example
/etc/fstab
#+end_example

**** fstab config

#+NAME: fstab
#+BEGIN_SRC conf
# Device		Mountpoint	FStype	Options		Dump	Pass#
/dev/gpt/efiboot0		/boot/efi	msdosfs	rw		2	2
/dev/nda0p3.eli		none	swap	sw		0	0
# linux
proc                            /proc           procfs  rw      0       0
linprocfs                       /compat/linux/proc	linprocfs	rw	0	0
linsysfs                        /compat/linux/sys	linsysfs	rw	0	0
#+END_SRC

**** fstab tangle
:PROPERTIES:
:ORDERED:  t
:END:

+ root dir

#+NAME: fstab-root-dir
#+BEGIN_SRC conf :noweb yes :tangle "/sudo::/etc/fstab"
<<fstab>>
#+END_SRC
  
+ current dir

#+NAME: fstab-current-dir
#+BEGIN_SRC conf :noweb yes :tangle "etc/fstab"
<<fstab>>
#+END_SRC

*** pf.conf

#+begin_example
/etc/pf.conf
#+end_example

**** pf.conf config

#+NAME: pf.conf
#+BEGIN_SRC conf
#=========================================================================#
# variables, macro and tables                                             #
#=========================================================================#

int_if="ue0" # usb to ethernet adaptor
#int_if="wlan0" # ralink usb wifi
vpn_if="tun0" # vpn interface
all_networks="0.0.0.0/0"
vpn_network="$vpn_if:network"
tcp_services = "{ ntp, 6881 }" # tcp services - torrent
udp_services = "{ ntp, 6882 }" # udp services - torrent
icmp_types = "{ echoreq, unreach }"
tcp_state="flags S/SA keep state"
udp_state="keep state"

#table <internet> { $all_networks, !self, !$int_if:network } # internet
#table <lan> { $int_if:network, !self }                      # lan network
table <myself> { self }                                     # self
table <martians> { 0.0.0.0/8 10.0.0.0/8 127.0.0.0/8 169.254.0.0/16     \
	 	   172.16.0.0/12 192.0.0.0/24 192.0.2.0/24 224.0.0.0/3 \
	 	   192.168.0.0/16 198.18.0.0/15 198.51.100.0/24        \
	 	   203.0.113.0/24 }                         # broken networks

#=========================================================================#
# global policy                                                           #
#=========================================================================#

set block-policy drop
set loginterface $int_if
set fingerprints "/etc/pf.os"
set skip on lo0
scrub in all fragment reassemble no-df max-mss 1440
antispoof log quick for { lo $int_if } label "block_spoofing"

#=========================================================================#
# block                                                                   #
#=========================================================================#

block log all # block log all
block return out quick inet6 all tag IPV6 # block ipv6 
block in quick inet6 all tag IPV6 # block ipv6

# block broken networks - turned off for synergy
# block in quick from { <martians> no-route urpf-failed } to any tag BAD_PACKET

#=========================================================================#
# anchors                                                                 #
#=========================================================================#

# emerging threats - anchor
#anchor "emerging-threats"
#load anchor "emerging-threats" from "/etc/pf.anchors/emerging-threats"

# openvpn - anchor
anchor "openvpn"

#=========================================================================#
# traffic tag                                                             #
#=========================================================================#

# icmp
pass inet proto icmp all icmp-type $icmp_types keep state tag ICMP

# Allow the tcp and udp services defined in the macros at the top of the file
pass in on $int_if inet proto tcp from any to ($int_if) port $tcp_services $tcp_state tag TCP_IN
pass in on $int_if inet proto udp from any to ($int_if) port $udp_services $udp_state tag UDP_IN

# outbound traffic
block out on $int_if all
pass out quick on $int_if all modulate state
#pass out quick on $int_if from <myself> to <lan> modulate state tag LAN_OUT
#pass out quick on $int_if from <myself> to <internet> modulate state tag INTERNET_OUT
#+END_SRC

**** pf.conf tangle
:PROPERTIES:
:ORDERED:  t
:END:

+ root dir

#+NAME: pf.conf-root-dir
#+BEGIN_SRC conf :noweb yes :tangle "/sudo::/etc/pf.conf"
<<pf.conf>>
#+END_SRC
  
+ current dir

#+NAME: pf.conf-current-dir
#+BEGIN_SRC conf :noweb yes :tangle "etc/pf.conf"
<<pf.conf>>
#+END_SRC

*** rc.conf

#+begin_example
/etc/rc.conf
#+end_example

**** rc.conf config

#+NAME: rc.conf
#+BEGIN_SRC conf
zfs_enable="YES"
clear_tmp_enable="YES"
syslogd_flags="-ss"
hostname="pollux"
ifconfig_ue0="DHCP"
local_unbound_enable="YES"
sshd_enable="NO"
moused_enable="YES"
# Set dumpdev to "AUTO" to enable crash dumps, "NO" to disable
dumpdev="AUTO"
# pf firewall
pf_enable="YES"
# time and date
ntpd_enable="YES"
ntpd_sync_on_start="YES"
# power settings
powerd_enable="YES"
powerd_flags="-a hiadaptive -b adaptive"
performance_cx_lowest="Cmax"
economy_cx_lowest="Cmax"
# kld list 
kld_list="nvidia-modeset nvidia-drm linux linux64 i915kms ext2fs"
# wayland
seatd_enable="YES"
# dbus
dbus_enable="YES"
# linux
linux_enable="YES"
# virtual oss - start with: sudo sysrc onestart virtual_oss 
virtual_oss_enable="NO"
# sndiod audio
sndiod_enable="YES"
# devfs rules for user mounting drives
devfs_system_ruleset="localrules"
# ralink wifi
wlans_run0="wlan0"
ifconfig_wlan0="WPA SYNDHCP"
dnscrypt_proxy_enable="YES"
dnscrypt_proxy_pidfile="/var/run/dnscrypt-proxy.pid"
dnscrypt_proxy_logfile="/var/log/dnscrypt-proxy.log"
#+END_SRC

**** rc.conf tangle
:PROPERTIES:
:ORDERED:  t
:END:

+ root dir

#+NAME: rc.conf-root-dir
#+BEGIN_SRC conf :noweb yes :tangle "/sudo::/etc/rc.conf"
<<rc.conf>>
#+END_SRC
  
+ current dir

#+NAME: rc.conf-current-dir
#+BEGIN_SRC conf :noweb yes :tangle "etc/rc.conf"
<<rc.conf>>
#+END_SRC

*** resolv.conf

#+begin_example
/etc/resolv.conf
#+end_example

**** resolv.conf config

#+NAME: resolv.conf
#+BEGIN_SRC conf
# Generated by resolvconf
search localdomain
# nameserver 192.168.1.1

nameserver 127.0.0.1
options edns0
#+END_SRC

**** resolv.conf tangle
:PROPERTIES:
:ORDERED:  t
:END:

+ root dir

#+NAME: resolv.conf-root-dir
#+BEGIN_SRC conf :noweb yes :tangle "/sudo::/etc/resolv.conf"
<<resolv.conf>>
#+END_SRC
  
+ current dir

#+NAME: resolv.conf-current-dir
#+BEGIN_SRC conf :noweb yes :tangle "etc/resolv.conf"
<<resolv.conf>>
#+END_SRC

*** sysctl.conf

#+begin_example
/etc/sysctl.conf
#+end_example

**** sysctl.conf config

#+NAME: sysctl.conf
#+BEGIN_SRC conf
#
#  This file is read when going to multi-user and its contents piped thru
#  ``sysctl'' to adjust kernel values.  ``man 5 sysctl.conf'' for details.
#

# Uncomment this to prevent users from seeing information about processes that
# are being run under another UID.
#security.bsd.see_other_uids=0
security.bsd.see_other_uids=0
security.bsd.see_other_gids=0
security.bsd.see_jail_proc=0
security.bsd.unprivileged_read_msgbuf=0
security.bsd.unprivileged_proc_debug=0
kern.randompid=1
vfs.zfs.min_auto_ashift=12
# disable bell
hw.syscons.bell=0
# user mount drives
vfs.usermount=1
# default audio output - headphones
hw.snd.default_unit=1
# use new audio devices automatically
hw.snd.default_auto=1
# chromium
kern.ipc.shm_allow_removed=1
# change reponsiveness from server to desktop
kern.sched.preempt_thresh=224
# screen brightness
hw.acpi.video.lcd0.economy=50
hw.acpi.video.lcd0.fullpower=100
hw.acpi.video.lcd0.brightness=100
#+END_SRC

**** sysctl.conf tangle
:PROPERTIES:
:ORDERED:  t
:END:

+ root dir

#+NAME: sysctl.conf-root-dir
#+BEGIN_SRC conf :noweb yes :tangle "/sudo::/etc/sysctl.conf"
<<sysctl.conf>>
#+END_SRC
  
+ current dir

#+NAME: sysctl.conf-current-dir
#+BEGIN_SRC conf :noweb yes :tangle "etc/sysctl.conf"
<<sysctl.conf>>
#+END_SRC

*** ttys

#+begin_example
/etc/ttys
#+end_example

**** ttys config

#+NAME: ttys
#+BEGIN_SRC conf
#
#	@(#)ttys	5.1 (Berkeley) 4/17/89
#
# This file specifies various information about terminals on the system.
# It is used by several different programs.  Common entries for the
# various columns include:
#
# name  The name of the terminal device.
#
# getty The program to start running on the terminal.  Typically a
#       getty program, as the name implies.  Other common entries
#       include none, when no getty is needed, and xdm, to start the
#       X Window System.
#
# type The initial terminal type for this port.  For hardwired
#      terminal lines, this will contain the type of terminal used.
#      For virtual consoles, the correct type is typically xterm.
#      Other common values include dialup for incoming modem ports, and
#      unknown when the terminal type cannot be predetermined.
#
# status Must be on or off.  If on, init will run the getty program on
#        the specified port.  If the word "secure" appears, this tty
#        allows root login.
#
# name	getty				type	status		comments
#
# If console is marked "insecure", then init will ask for the root password
# when going to single-user mode.
console	none				unknown	off insecure
#
ttyv0	"/usr/libexec/getty Pc"		xterm	onifexists insecure
# Virtual terminals
ttyv1	"/usr/libexec/getty Pc"		xterm	onifexists insecure
ttyv2	"/usr/libexec/getty Pc"		xterm	onifexists insecure
ttyv3	"/usr/libexec/getty Pc"		xterm	onifexists insecure
ttyv4	"/usr/libexec/getty Pc"		xterm	onifexists insecure
ttyv5	"/usr/libexec/getty Pc"		xterm	onifexists insecure
ttyv6	"/usr/libexec/getty Pc"		xterm	onifexists insecure
ttyv7	"/usr/libexec/getty Pc"		xterm	onifexists insecure
ttyv8	"/usr/local/bin/xdm -nodaemon"	xterm	off insecure
# Serial terminals
# The 'dialup' keyword identifies dialin lines to login, fingerd etc.
ttyu0	"/usr/libexec/getty 3wire"	vt100	onifconsole insecure
ttyu1	"/usr/libexec/getty 3wire"	vt100	onifconsole insecure
ttyu2	"/usr/libexec/getty 3wire"	vt100	onifconsole insecure
ttyu3	"/usr/libexec/getty 3wire"	vt100	onifconsole insecure
# Dumb console
dcons	"/usr/libexec/getty std.115200"	vt100	off insecure
# Xen Virtual console
xc0	"/usr/libexec/getty Pc"		xterm	onifconsole insecure
# RISC-V HTIF console
rcons	"/usr/libexec/getty std.115200"	vt100	onifconsole insecure
#+END_SRC

**** ttys tangle
:PROPERTIES:
:ORDERED:  t
:END:

+ root dir

#+NAME: ttys-root-dir
#+BEGIN_SRC conf :noweb yes :tangle "/sudo::/etc/ttys"
<<ttys>>
#+END_SRC
  
+ current dir

#+NAME: ttys-current-dir
#+BEGIN_SRC conf :noweb yes :tangle "etc/ttys"
<<ttys>>
#+END_SRC

*** unbound
**** conf.d
***** custom.conf

#+begin_example
/etc/unbound/conf.d/custom.conf
#+end_example

****** custom.conf config

#+NAME: custom.conf
#+BEGIN_SRC conf
server:
# include: "/etc/unbound/unbound_outgoing_interface"
	verbosity: 1
	access-control: 0.0.0.0/0 refuse
	access-control: 127.0.0.0/8 allow
	access-control: ::0/0 refuse
	access-control: ::1 allow
	access-control: ::ffff:127.0.0.1 allow
	
	# enable to not answer id.server and hostname.bind queries.
	hide-identity: yes
	hide-version: yes
	harden-glue: yes
	harden-dnssec-stripped: yes
	
        # dont query localhost needed for dnscrypt-proxy
        do-not-query-localhost: no
# remote-control:
#	control-enable: no
#+END_SRC

****** custom.conf tangle
:PROPERTIES:
:ORDERED:  t
:END:

+ root dir

#+NAME: custom.conf-root-dir
#+BEGIN_SRC conf :noweb yes :tangle "/sudo::/etc/unbound/conf.d/custom.conf"
<<custom.conf>>
#+END_SRC
  
+ current dir

#+NAME: custom.conf-current-dir
#+BEGIN_SRC conf :noweb yes :tangle "etc/unbound/conf.d/custom.conf"
<<custom.conf>>
#+END_SRC

**** forward.conf

#+begin_example
/etc/unbound/forward.conf
#+end_example

***** forward.conf config

#+NAME: forward.conf
#+BEGIN_SRC conf
# Generated by resolvconf

forward-zone:
	name: "."
	forward-addr: 127.0.0.1@5353
#+END_SRC

***** forward.conf tangle
:PROPERTIES:
:ORDERED:  t
:END:

+ root dir

#+NAME: forward.conf-root-dir
#+BEGIN_SRC conf :noweb yes :tangle "/sudo::/etc/unbound/forward.conf"
<<forward.conf>>
#+END_SRC
  
+ current dir

#+NAME: forward.conf-current-dir
#+BEGIN_SRC conf :noweb yes :tangle "etc/unbound/forward.conf"
<<forward.conf>>
#+END_SRC

**** unbound_outgoing_interface

#+begin_example
/etc/unbound/unbound_outgoing_interface
#+end_example

***** unbound_outgoing_interface config

#+NAME: unbound_outgoing_interface
#+BEGIN_SRC conf
#+END_SRC

***** unbound_outgoing_interface tangle
:PROPERTIES:
:ORDERED:  t
:END:

+ root dir

#+NAME: unbound_outgoing_interface-root-dir
#+BEGIN_SRC conf :noweb yes :tangle "/sudo::/etc/unbound/unbound_outgoing_interface"
<<unbound_outgoing_interface>>
#+END_SRC
  
+ current dir

#+NAME: unbound_outgoing_interface-current-dir
#+BEGIN_SRC conf :noweb yes :tangle "etc/unbound/unbound_outgoing_interface"
<<unbound_outgoing_interface>>
#+END_SRC

** /usr/local/etc
*** doas

#+begin_example
/usr/local/etc/doas.conf
#+end_example

**** doas config

#+NAME: doas
#+BEGIN_SRC conf
# permit user
permit keepenv :djwilcox

# mount drives
permit nopass :djwilcox cmd mount
permit nopass :djwilcox cmd umount

# restart networking
permit nopass :djwilcox cmd service args netif start
permit nopass :djwilcox cmd service args netif stop
permit nopass :djwilcox cmd service args netif restart

# ifconfig wlan0
permit nopass :djwilcox cmd ifconfig args wlan0 up
permit nopass :djwilcox cmd ifconfig args wlan0 down

# ifconfig ue0 - usb ethenet
permit nopass :djwilcox cmd ifconfig args ue0 up
permit nopass :djwilcox cmd ifconfig args ue0 down

# ifconfig bge0 - thunderbolt ethernet
permit nopass :djwilcox cmd ifconfig args bge0 up
permit nopass :djwilcox cmd ifconfig args bge0 down

# ifconfig scan and wpa_supplicant
permit nopass :djwilcox cmd ifconfig args wlan0 list scan
permit nopass :djwilcox cmd wpa_supplicant args -B -i wlan0 -c /etc/wpa_supplicant.conf 

# musicpd service start and stop
permit nopass :djwilcox cmd service args musicpd onestart
permit nopass :djwilcox cmd service args musicpd onestop

# pkg update
permit nopass :djwilcox cmd pkg args update

# root as root
permit nopass keepenv root as root
#+END_SRC

**** doas tangle
:PROPERTIES:
:ORDERED:  t
:END:

+ root dir

#+NAME: doas-root-dir
#+BEGIN_SRC conf :noweb yes :tangle "/sudo::/usr/local/etc/doas.conf"
<<doas>>
#+END_SRC
  
+ current dir

#+NAME: doas-current-dir
#+BEGIN_SRC conf :noweb yes :tangle "usr/local/etc/doas.conf"
<<doas>>
#+END_SRC

